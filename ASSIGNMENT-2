{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the adjacency list reprsentation the graph is:\n",
      "{0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 5: [4, 1]}\n"
     ]
    }
   ],
   "source": [
    "from queue import Queue\n",
    "graph={0:[1,3], 1:[0,2,3], 2:[4,1,5],3:[4,0,1], 5:[4,1]}\n",
    "print(\"the adjacency list reprsentation the graph is:\")\n",
    "print(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfs(graph, sourece) :\n",
    "    Q= Queue()\n",
    "    visited_vertices = set({0})\n",
    "    while not Q.empty():\n",
    "        vertex = Q.get()\n",
    "        print(vertex, end=\"-->\")\n",
    "        for u in graph[vertex]:\n",
    "            if u not in visted_vertices:\n",
    "                Q.put(u)\n",
    "                visited_vertices.update({u})\n",
    "                print(\"bfs traversl of graph with source 0 is:\")\n",
    "                bfs(graph, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph1 ={\n",
    "    'A' :['B','S'],\n",
    "    'B' :['A'],\n",
    "    'C' :['D','E','F','S'],\n",
    "    'D' :['C','H'],\n",
    "    'E' :['C'],\n",
    "    'F' :['C','G'],\n",
    "    'G' :['F','S'],\n",
    "    'H' :['E','G'],\n",
    "    'S' :['A','C','G'],\n",
    "}\n",
    "def dfs(graph, node,visited):\n",
    "    if node not in visited:\n",
    "        visited.append(node)\n",
    "        for k in graph[node]:\n",
    "            dfs(graph,k, visited)\n",
    "            return visited\n",
    "        visited =dfs(graph1,'D',[])\n",
    "        print(visited)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from copy import deepcopy \n",
    "import numpy as np\n",
    "import time\n",
    "def bestsolution(state):\n",
    "    bestsol=np.array([], int).reshape(-1.9)\n",
    "    count = len(state) - 1\n",
    "    while count !=-1:\n",
    "        bestsol=np.insert(bestsol, 0, state[count]['puzzle'], 0)\n",
    "        count=(state[count]['parent'])\n",
    "    return bestsol.reshape(-1,3, 3)\n",
    "# checks for the uniquess of the iteration(it).\n",
    "def all(checkarray):\n",
    "    set=[]\n",
    "    for it in set:\n",
    "        for checkarray in it:\n",
    "            return 1\n",
    "        else:\n",
    "            return 0\n",
    "        #number of misplaced tiles\n",
    "        def misplaced_tiles(puzzle,goal):\n",
    "            mscost =np.sum(puzzle != goal) - 1\n",
    "            return mscost if mscost > 0 else 0\n",
    "        def coordinates(puzzle):\n",
    "            pos = p, q in enumerate(puzzle):\n",
    "            pos[q] = p\n",
    "            return pos \n",
    "        #start of 8 puzzle evaluation, using misplaced tiles herustics\n",
    "        def evaluate_misplaced(puzzle, goal):\n",
    "            steps = np.array([(9'up), [0, 1, 2], -3),('down',[6, 7, 8],  3),('left', [0,])\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
